{"ast":null,"code":"var $ijazI$react = require(\"react\");\n\nvar $ijazI$radixuireactusecallbackref = require(\"@radix-ui/react-use-callback-ref\");\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\n$parcel$export(module.exports, \"useControllableState\", () => $b84d42d44371bff7$export$6f32135080cb4c3);\n\nfunction $b84d42d44371bff7$export$6f32135080cb4c3({\n  prop: prop,\n  defaultProp: defaultProp,\n  onChange = () => {}\n}) {\n  const [uncontrolledProp, setUncontrolledProp] = $b84d42d44371bff7$var$useUncontrolledState({\n    defaultProp: defaultProp,\n    onChange: onChange\n  });\n  const isControlled = prop !== undefined;\n  const value1 = isControlled ? prop : uncontrolledProp;\n  const handleChange = $ijazI$radixuireactusecallbackref.useCallbackRef(onChange);\n  const setValue = $ijazI$react.useCallback(nextValue => {\n    if (isControlled) {\n      const setter = nextValue;\n      const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n      if (value !== prop) handleChange(value);\n    } else setUncontrolledProp(nextValue);\n  }, [isControlled, prop, setUncontrolledProp, handleChange]);\n  return [value1, setValue];\n}\n\nfunction $b84d42d44371bff7$var$useUncontrolledState({\n  defaultProp: defaultProp,\n  onChange: onChange\n}) {\n  const uncontrolledState = $ijazI$react.useState(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = $ijazI$react.useRef(value);\n  const handleChange = $ijazI$radixuireactusecallbackref.useCallbackRef(onChange);\n  $ijazI$react.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n  return uncontrolledState;\n}","map":{"version":3,"sources":["packages/react/use-controllable-state/src/index.ts","packages/react/use-controllable-state/src/useControllableState.tsx"],"names":["onChange","useUncontrolledState","isControlled","prop","value","handleChange","useCallbackRef","setValue","nextValue","setter","setUncontrolledProp","uncontrolledState","React","prevValueRef"],"mappings":";;;;;;;;;;;;;;;ACWA,SAAA,wCAAA,CAAiC;ADXjC,EAAA,IAAA,ECWiC,IAAA;ADXjC,EAAA,WAAA,ECWiC,WAAA;AAG/BA,EAAAA,QAAQ,GAAG,MAAM,CAHnB;AAAiC,CAAjC,EAIkC;AAChC,QAAM,CAAA,gBAAA,EAAA,mBAAA,IAA0CC,0CAAoB,CAAC;ADhBvE,IAAA,WAAA,ECgBuE,WAAA;ADhBvE,IAAA,QAAA,ECgBsFD;AAAf,GAAD,CAApE;AACA,QAAME,YAAY,GAAGC,IAAI,KAAzB,SAAA;AACA,QAAMC,MAAK,GAAGF,YAAY,GAAA,IAAA,GAA1B,gBAAA;AACA,QAAMG,YAAY,GAAGC,iCAAAA,CAAAA,cAAAA,CAArB,QAAqBA,CAArB;AAEA,QAAMC,QAA6D,GAAG,YAAA,CAAA,WAAA,CACpE,SAACC,IAAc;AACb,QAAA,YAAA,EAAkB;AAChB,YAAMC,MAAM,GAAZ,SAAA;AACA,YAAML,KAAK,GAAG,OAAA,SAAA,KAAA,UAAA,GAAkCK,MAAM,CAAxC,IAAwC,CAAxC,GAAd,SAAA;AACA,UAAIL,KAAK,KAAT,IAAA,EAAoBC,YAAY,CAAhC,KAAgC,CAAZA;AAHtB,KAAA,MAKEK,mBAAmB,CAAnBA,SAAmB,CAAnBA;AAPgE,GAAA,EAUpE,CAAA,YAAA,EAAA,IAAA,EAAA,mBAAA,EAAA,YAAA,CAVoE,CAAtE;AAaA,SAAO,CAAA,MAAA,EAAA,QAAA,CAAP;AACD;;AAED,SAAA,0CAAA,CAAiC;ADrCjC,EAAA,WAAA,ECqCiC,WAAA;ADrCjC,EAAA,QAAA,ECqCA;AAAiC,CAAjC,EAGgD;AAC9C,QAAMC,iBAAiB,GAAGC,YAAAA,CAAAA,QAAAA,CAA1B,WAA0BA,CAA1B;AACA,QAAM,CAAA,KAAA,IAAN,iBAAA;AACA,QAAMC,YAAY,GAAGD,YAAAA,CAAAA,MAAAA,CAArB,KAAqBA,CAArB;AACA,QAAMP,YAAY,GAAGC,iCAAAA,CAAAA,cAAAA,CAArB,QAAqBA,CAArB;AAEAM,EAAAA,YAAAA,CAAAA,SAAAA,CAAgB,MAAM;AACpB,QAAIC,YAAY,CAAZA,OAAAA,KAAJ,KAAA,EAAoC;AAClCR,MAAAA,YAAY,CAAZA,KAAY,CAAZA;AACAQ,MAAAA,YAAY,CAAZA,OAAAA,GAAAA,KAAAA;AACD;AAJHD,GAAAA,EAKG,CAAA,KAAA,EAAA,YAAA,EAAA,YAAA,CALHA;AAOA,SAAA,iBAAA;AACD","sourcesContent":["export { useControllableState } from './useControllableState';\n","import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"]},"metadata":{},"sourceType":"script"}