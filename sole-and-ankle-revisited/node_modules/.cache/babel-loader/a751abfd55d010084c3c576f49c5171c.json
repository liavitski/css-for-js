{"ast":null,"code":"var $4O1Ne$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"createContext\", () => $dec3cc0142d4f286$export$fd42f52fd3ae1109);\n$parcel$export(module.exports, \"createContextScope\", () => $dec3cc0142d4f286$export$50c7b4e9d9f19c1);\nfunction $dec3cc0142d4f286$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n  const Context = /*#__PURE__*/$4O1Ne$react.createContext(defaultContext);\n  function Provider(props) {\n    const {\n      children: children,\n      ...context\n    } = props; // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = $4O1Ne$react.useMemo(() => context, Object.values(context));\n    return /*#__PURE__*/$4O1Ne$react.createElement(Context.Provider, {\n      value: value\n    }, children);\n  }\n  function useContext(consumerName) {\n    const context = $4O1Ne$react.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext];\n}\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\nfunction $dec3cc0142d4f286$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {\n  let defaultContexts = [];\n  /* -----------------------------------------------------------------------------------------------\n  * createContext\n  * ---------------------------------------------------------------------------------------------*/\n  function $dec3cc0142d4f286$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n    const BaseContext = /*#__PURE__*/$4O1Ne$react.createContext(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n    function Provider(props) {\n      const {\n        scope: scope,\n        children: children,\n        ...context\n      } = props;\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext; // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = $4O1Ne$react.useMemo(() => context, Object.values(context));\n      return /*#__PURE__*/$4O1Ne$react.createElement(Context.Provider, {\n        value: value\n      }, children);\n    }\n    function useContext(consumerName, scope) {\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;\n      const context = $4O1Ne$react.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext];\n  }\n  /* -----------------------------------------------------------------------------------------------\n  * createScope\n  * ---------------------------------------------------------------------------------------------*/\n  const createScope = () => {\n    const scopeContexts = defaultContexts.map(defaultContext => {\n      return /*#__PURE__*/$4O1Ne$react.createContext(defaultContext);\n    });\n    return function useScope(scope) {\n      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;\n      return $4O1Ne$react.useMemo(() => ({\n        [`__scope${scopeName}`]: {\n          ...scope,\n          [scopeName]: contexts\n        }\n      }), [scope, contexts]);\n    };\n  };\n  createScope.scopeName = scopeName;\n  return [$dec3cc0142d4f286$export$fd42f52fd3ae1109, $dec3cc0142d4f286$var$composeContextScopes(createScope, ...createContextScopeDeps)];\n}\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\nfunction $dec3cc0142d4f286$var$composeContextScopes(...scopes) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n  const createScope1 = () => {\n    const scopeHooks = scopes.map(createScope => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName\n    }));\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes1 = scopeHooks.reduce((nextScopes, {\n        useScope: useScope,\n        scopeName: scopeName\n      }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return {\n          ...nextScopes,\n          ...currentScope\n        };\n      }, {});\n      return $4O1Ne$react.useMemo(() => ({\n        [`__scope${baseScope.scopeName}`]: nextScopes1\n      }), [nextScopes1]);\n    };\n  };\n  createScope1.scopeName = baseScope.scopeName;\n  return createScope1;\n}","map":{"version":3,"names":["$dec3cc0142d4f286$export$fd42f52fd3ae1109","createContext","rootComponentName","defaultContext","Context","$4O1Ne$react","Provider","props","children","context","value","useMemo","Object","values","createElement","useContext","consumerName","undefined","Error","displayName","$dec3cc0142d4f286$export$50c7b4e9d9f19c1","createContextScope","scopeName","createContextScopeDeps","defaultContexts","BaseContext","index","length","scope","createScope","scopeContexts","map","useScope","contexts","$dec3cc0142d4f286$var$composeContextScopes","composeContextScopes","scopes","baseScope","createScope1","scopeHooks","useComposedScopes","overrideScopes","nextScopes1","reduce","nextScopes","scopeProps","currentScope"],"sources":["packages/react/context/src/index.ts","packages/react/context/src/createContext.tsx"],"sourcesContent":["export { createContext, createContextScope } from './createContext';\nexport type { CreateScope, Scope } from './createContext';\n","import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    function Provider(\n      props: ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    ) {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName][index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    }\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName][index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}