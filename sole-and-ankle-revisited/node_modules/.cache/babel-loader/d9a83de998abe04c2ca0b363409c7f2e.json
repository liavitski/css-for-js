{"ast":null,"code":"var $92muK$react = require(\"react\");\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\n$parcel$export(module.exports, \"useCallbackRef\", () => $28e03942f763e819$export$25bec8c6f54ee79a);\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\n\nfunction $28e03942f763e819$export$25bec8c6f54ee79a(callback) {\n  const callbackRef = $92muK$react.useRef(callback);\n  $92muK$react.useEffect(() => {\n    callbackRef.current = callback;\n  }); // https://github.com/facebook/react/issues/19240\n\n  return $92muK$react.useMemo(() => (...args) => {\n    var _callbackRef$current;\n\n    return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);\n  }, []);\n}","map":{"version":3,"sources":["packages/react/use-callback-ref/src/useCallbackRef.tsx"],"names":["callbackRef","React","args"],"mappings":";;;;;;;;;;;;AAEA;;;AAGA;;AACA,SAAA,yCAAA,CAAA,QAAA,EAAuF;AACrF,QAAMA,WAAW,GAAGC,YAAAA,CAAAA,MAAAA,CAApB,QAAoBA,CAApB;AAEAA,EAAAA,YAAAA,CAAAA,SAAAA,CAAgB,MAAM;AACpBD,IAAAA,WAAW,CAAXA,OAAAA,GAAAA,QAAAA;AAJmF,GAGrFC,EAHqF,CAKpF;;AAGD,SAAO,YAAA,CAAA,OAAA,CAAc,MAAO,CAAIC,GAAJ,IAAA,KAA5B;AAA4B,QAAA,oBAAA;;AAAA,WAAA,CAAA,oBAAA,GAAaF,WAAW,CAAxB,OAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAaA,oBAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAAW,GAAxB,IAAaA,CAAb;AAArB,GAAA,EAAP,EAAO,CAAP;AACD","sourcesContent":["import * as React from 'react';\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, []);\n}\n\nexport { useCallbackRef };\n"]},"metadata":{},"sourceType":"script"}