{"ast":null,"code":"var $fnLeV$react = require(\"react\");\nvar $fnLeV$reactdom = require(\"react-dom\");\nvar $fnLeV$radixuireactcomposerefs = require(\"@radix-ui/react-compose-refs\");\nvar $fnLeV$radixuireactuselayouteffect = require(\"@radix-ui/react-use-layout-effect\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"Presence\", () => $a2fa0214bb2735a1$export$99c2b779aa4e8b8b);\nfunction $8f63844556d0d3cd$export$3e6543de14f8614f(initialState, machine) {\n  return $fnLeV$react.useReducer((state, event) => {\n    const nextState = machine[state][event];\n    return nextState !== null && nextState !== void 0 ? nextState : state;\n  }, initialState);\n}\nconst $a2fa0214bb2735a1$export$99c2b779aa4e8b8b = props => {\n  const {\n    present: present,\n    children: children\n  } = props;\n  const presence = $a2fa0214bb2735a1$var$usePresence(present);\n  const child = typeof children === 'function' ? children({\n    present: presence.isPresent\n  }) : $fnLeV$react.Children.only(children);\n  const ref = $fnLeV$radixuireactcomposerefs.useComposedRefs(presence.ref, child.ref);\n  const forceMount = typeof children === 'function';\n  return forceMount || presence.isPresent ? /*#__PURE__*/$fnLeV$react.cloneElement(child, {\n    ref: ref\n  }) : null;\n};\n$a2fa0214bb2735a1$export$99c2b779aa4e8b8b.displayName = 'Presence';\n/* -------------------------------------------------------------------------------------------------\n * usePresence\n * -----------------------------------------------------------------------------------------------*/\nfunction $a2fa0214bb2735a1$var$usePresence(present) {\n  const [node1, setNode] = $fnLeV$react.useState();\n  const stylesRef = $fnLeV$react.useRef({});\n  const prevPresentRef = $fnLeV$react.useRef(present);\n  const prevAnimationNameRef = $fnLeV$react.useRef('none');\n  const initialState = present ? 'mounted' : 'unmounted';\n  const [state, send] = $8f63844556d0d3cd$export$3e6543de14f8614f(initialState, {\n    mounted: {\n      UNMOUNT: 'unmounted',\n      ANIMATION_OUT: 'unmountSuspended'\n    },\n    unmountSuspended: {\n      MOUNT: 'mounted',\n      ANIMATION_END: 'unmounted'\n    },\n    unmounted: {\n      MOUNT: 'mounted'\n    }\n  });\n  $fnLeV$react.useEffect(() => {\n    const currentAnimationName = $a2fa0214bb2735a1$var$getAnimationName(stylesRef.current);\n    prevAnimationNameRef.current = state === 'mounted' ? currentAnimationName : 'none';\n  }, [state]);\n  $fnLeV$radixuireactuselayouteffect.useLayoutEffect(() => {\n    const styles = stylesRef.current;\n    const wasPresent = prevPresentRef.current;\n    const hasPresentChanged = wasPresent !== present;\n    if (hasPresentChanged) {\n      const prevAnimationName = prevAnimationNameRef.current;\n      const currentAnimationName = $a2fa0214bb2735a1$var$getAnimationName(styles);\n      if (present) send('MOUNT');else if (currentAnimationName === 'none' || (styles === null || styles === void 0 ? void 0 : styles.display) === 'none')\n        // If there is no exit animation or the element is hidden, animations won't run\n        // so we unmount instantly\n        send('UNMOUNT');else {\n        /**\n        * When `present` changes to `false`, we check changes to animation-name to\n        * determine whether an animation has started. We chose this approach (reading\n        * computed styles) because there is no `animationrun` event and `animationstart`\n        * fires after `animation-delay` has expired which would be too late.\n        */\n        const isAnimating = prevAnimationName !== currentAnimationName;\n        if (wasPresent && isAnimating) send('ANIMATION_OUT');else send('UNMOUNT');\n      }\n      prevPresentRef.current = present;\n    }\n  }, [present, send]);\n  $fnLeV$radixuireactuselayouteffect.useLayoutEffect(() => {\n    if (node1) {\n      /**\n      * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`\n      * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we\n      * make sure we only trigger ANIMATION_END for the currently active animation.\n      */\n      const handleAnimationEnd = event => {\n        const currentAnimationName = $a2fa0214bb2735a1$var$getAnimationName(stylesRef.current);\n        const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n        if (event.target === node1 && isCurrentAnimation)\n          // With React 18 concurrency this update is applied\n          // a frame after the animation ends, creating a flash of visible content.\n          // By manually flushing we ensure they sync within a frame, removing the flash.\n          $fnLeV$reactdom.flushSync(() => send('ANIMATION_END'));\n      };\n      const handleAnimationStart = event => {\n        if (event.target === node1)\n          // if animation occurred, store its name as the previous animation.\n          prevAnimationNameRef.current = $a2fa0214bb2735a1$var$getAnimationName(stylesRef.current);\n      };\n      node1.addEventListener('animationstart', handleAnimationStart);\n      node1.addEventListener('animationcancel', handleAnimationEnd);\n      node1.addEventListener('animationend', handleAnimationEnd);\n      return () => {\n        node1.removeEventListener('animationstart', handleAnimationStart);\n        node1.removeEventListener('animationcancel', handleAnimationEnd);\n        node1.removeEventListener('animationend', handleAnimationEnd);\n      };\n    } else\n      // Transition to the unmounted state if the node is removed prematurely.\n      // We avoid doing so during cleanup as the node may change but still exist.\n      send('ANIMATION_END');\n  }, [node1, send]);\n  return {\n    isPresent: ['mounted', 'unmountSuspended'].includes(state),\n    ref: $fnLeV$react.useCallback(node => {\n      if (node) stylesRef.current = getComputedStyle(node);\n      setNode(node);\n    }, [])\n  };\n}\n/* -----------------------------------------------------------------------------------------------*/\nfunction $a2fa0214bb2735a1$var$getAnimationName(styles) {\n  return (styles === null || styles === void 0 ? void 0 : styles.animationName) || 'none';\n}","map":{"version":3,"names":["$8f63844556d0d3cd$export$3e6543de14f8614f","useStateMachine","initialState","machine","$fnLeV$react","useReducer","state","event","nextState","$a2fa0214bb2735a1$export$99c2b779aa4e8b8b","props","present","children","presence","$a2fa0214bb2735a1$var$usePresence","child","isPresent","Children","only","ref","$fnLeV$radixuireactcomposerefs","useComposedRefs","forceMount","cloneElement","displayName","usePresence","node1","setNode","useState","stylesRef","useRef","prevPresentRef","prevAnimationNameRef","send","mounted","UNMOUNT","ANIMATION_OUT","unmountSuspended","MOUNT","ANIMATION_END","unmounted","useEffect","currentAnimationName","$a2fa0214bb2735a1$var$getAnimationName","current","$fnLeV$radixuireactuselayouteffect","useLayoutEffect","styles","wasPresent","hasPresentChanged","prevAnimationName","display","isAnimating","handleAnimationEnd","isCurrentAnimation","includes","animationName","target","$fnLeV$reactdom","flushSync","handleAnimationStart","addEventListener","removeEventListener","useCallback","node","getComputedStyle","getAnimationName"],"sources":["packages/react/presence/src/index.ts","packages/react/presence/src/Presence.tsx","packages/react/presence/src/useStateMachine.tsx"],"sourcesContent":["export { Presence } from './Presence';\nexport type { PresenceProps } from './Presence';\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useStateMachine } from './useStateMachine';\n\ninterface PresenceProps {\n  children: React.ReactElement | ((props: { present: boolean }) => React.ReactElement);\n  present: boolean;\n}\n\nconst Presence: React.FC<PresenceProps> = (props) => {\n  const { present, children } = props;\n  const presence = usePresence(present);\n\n  const child = (\n    typeof children === 'function'\n      ? children({ present: presence.isPresent })\n      : React.Children.only(children)\n  ) as React.ReactElement;\n\n  const ref = useComposedRefs(presence.ref, (child as any).ref);\n  const forceMount = typeof children === 'function';\n  return forceMount || presence.isPresent ? React.cloneElement(child, { ref }) : null;\n};\n\nPresence.displayName = 'Presence';\n\n/* -------------------------------------------------------------------------------------------------\n * usePresence\n * -----------------------------------------------------------------------------------------------*/\n\nfunction usePresence(present: boolean) {\n  const [node, setNode] = React.useState<HTMLElement>();\n  const stylesRef = React.useRef<CSSStyleDeclaration>({} as any);\n  const prevPresentRef = React.useRef(present);\n  const prevAnimationNameRef = React.useRef<string>('none');\n  const initialState = present ? 'mounted' : 'unmounted';\n  const [state, send] = useStateMachine(initialState, {\n    mounted: {\n      UNMOUNT: 'unmounted',\n      ANIMATION_OUT: 'unmountSuspended',\n    },\n    unmountSuspended: {\n      MOUNT: 'mounted',\n      ANIMATION_END: 'unmounted',\n    },\n    unmounted: {\n      MOUNT: 'mounted',\n    },\n  });\n\n  React.useEffect(() => {\n    const currentAnimationName = getAnimationName(stylesRef.current);\n    prevAnimationNameRef.current = state === 'mounted' ? currentAnimationName : 'none';\n  }, [state]);\n\n  useLayoutEffect(() => {\n    const styles = stylesRef.current;\n    const wasPresent = prevPresentRef.current;\n    const hasPresentChanged = wasPresent !== present;\n\n    if (hasPresentChanged) {\n      const prevAnimationName = prevAnimationNameRef.current;\n      const currentAnimationName = getAnimationName(styles);\n\n      if (present) {\n        send('MOUNT');\n      } else if (currentAnimationName === 'none' || styles?.display === 'none') {\n        // If there is no exit animation or the element is hidden, animations won't run\n        // so we unmount instantly\n        send('UNMOUNT');\n      } else {\n        /**\n         * When `present` changes to `false`, we check changes to animation-name to\n         * determine whether an animation has started. We chose this approach (reading\n         * computed styles) because there is no `animationrun` event and `animationstart`\n         * fires after `animation-delay` has expired which would be too late.\n         */\n        const isAnimating = prevAnimationName !== currentAnimationName;\n\n        if (wasPresent && isAnimating) {\n          send('ANIMATION_OUT');\n        } else {\n          send('UNMOUNT');\n        }\n      }\n\n      prevPresentRef.current = present;\n    }\n  }, [present, send]);\n\n  useLayoutEffect(() => {\n    if (node) {\n      /**\n       * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`\n       * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we\n       * make sure we only trigger ANIMATION_END for the currently active animation.\n       */\n      const handleAnimationEnd = (event: AnimationEvent) => {\n        const currentAnimationName = getAnimationName(stylesRef.current);\n        const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n        if (event.target === node && isCurrentAnimation) {\n          // With React 18 concurrency this update is applied\n          // a frame after the animation ends, creating a flash of visible content.\n          // By manually flushing we ensure they sync within a frame, removing the flash.\n          ReactDOM.flushSync(() => send('ANIMATION_END'));\n        }\n      };\n      const handleAnimationStart = (event: AnimationEvent) => {\n        if (event.target === node) {\n          // if animation occurred, store its name as the previous animation.\n          prevAnimationNameRef.current = getAnimationName(stylesRef.current);\n        }\n      };\n      node.addEventListener('animationstart', handleAnimationStart);\n      node.addEventListener('animationcancel', handleAnimationEnd);\n      node.addEventListener('animationend', handleAnimationEnd);\n      return () => {\n        node.removeEventListener('animationstart', handleAnimationStart);\n        node.removeEventListener('animationcancel', handleAnimationEnd);\n        node.removeEventListener('animationend', handleAnimationEnd);\n      };\n    } else {\n      // Transition to the unmounted state if the node is removed prematurely.\n      // We avoid doing so during cleanup as the node may change but still exist.\n      send('ANIMATION_END');\n    }\n  }, [node, send]);\n\n  return {\n    isPresent: ['mounted', 'unmountSuspended'].includes(state),\n    ref: React.useCallback((node: HTMLElement) => {\n      if (node) stylesRef.current = getComputedStyle(node);\n      setNode(node);\n    }, []),\n  };\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getAnimationName(styles?: CSSStyleDeclaration) {\n  return styles?.animationName || 'none';\n}\n\nexport { Presence };\nexport type { PresenceProps };\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// 🤯 https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}