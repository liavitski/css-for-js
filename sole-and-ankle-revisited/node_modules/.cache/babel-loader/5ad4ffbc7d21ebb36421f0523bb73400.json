{"ast":null,"code":"var $g2vWm$babelruntimehelpersextends = require(\"@babel/runtime/helpers/extends\");\n\nvar $g2vWm$react = require(\"react\");\n\nvar $g2vWm$radixuiprimitive = require(\"@radix-ui/primitive\");\n\nvar $g2vWm$radixuireactprimitive = require(\"@radix-ui/react-primitive\");\n\nvar $g2vWm$radixuireactcomposerefs = require(\"@radix-ui/react-compose-refs\");\n\nvar $g2vWm$radixuireactusecallbackref = require(\"@radix-ui/react-use-callback-ref\");\n\nvar $g2vWm$radixuireactuseescapekeydown = require(\"@radix-ui/react-use-escape-keydown\");\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n$parcel$export(module.exports, \"DismissableLayer\", () => $d715e0554b679f1f$export$177fb62ff3ec1f22);\n$parcel$export(module.exports, \"DismissableLayerBranch\", () => $d715e0554b679f1f$export$4d5eb2109db14228);\n$parcel$export(module.exports, \"Root\", () => $d715e0554b679f1f$export$be92b6f5f03c0fe9);\n$parcel$export(module.exports, \"Branch\", () => $d715e0554b679f1f$export$aecb2ddcb55c95be);\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayer\n * -----------------------------------------------------------------------------------------------*/\n\nconst $d715e0554b679f1f$var$DISMISSABLE_LAYER_NAME = 'DismissableLayer';\nconst $d715e0554b679f1f$var$CONTEXT_UPDATE = 'dismissableLayer.update';\nconst $d715e0554b679f1f$var$POINTER_DOWN_OUTSIDE = 'dismissableLayer.pointerDownOutside';\nconst $d715e0554b679f1f$var$FOCUS_OUTSIDE = 'dismissableLayer.focusOutside';\nlet $d715e0554b679f1f$var$originalBodyPointerEvents;\nconst $d715e0554b679f1f$var$DismissableLayerContext = /*#__PURE__*/$g2vWm$react.createContext({\n  layers: new Set(),\n  layersWithOutsidePointerEventsDisabled: new Set(),\n  branches: new Set()\n});\nconst $d715e0554b679f1f$export$177fb62ff3ec1f22 = /*#__PURE__*/$g2vWm$react.forwardRef((props, forwardedRef) => {\n  var _node$ownerDocument;\n\n  const {\n    disableOutsidePointerEvents = false,\n    onEscapeKeyDown: onEscapeKeyDown,\n    onPointerDownOutside: onPointerDownOutside,\n    onFocusOutside: onFocusOutside,\n    onInteractOutside: onInteractOutside,\n    onDismiss: onDismiss,\n    ...layerProps\n  } = props;\n  const context = $g2vWm$react.useContext($d715e0554b679f1f$var$DismissableLayerContext);\n  const [node1, setNode] = $g2vWm$react.useState(null);\n  const ownerDocument = (_node$ownerDocument = node1 === null || node1 === void 0 ? void 0 : node1.ownerDocument) !== null && _node$ownerDocument !== void 0 ? _node$ownerDocument : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;\n  const [, force] = $g2vWm$react.useState({});\n  const composedRefs = $g2vWm$radixuireactcomposerefs.useComposedRefs(forwardedRef, node => setNode(node));\n  const layers = Array.from(context.layers);\n  const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1); // prettier-ignore\n\n  const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled); // prettier-ignore\n\n  const index = node1 ? layers.indexOf(node1) : -1;\n  const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n  const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n  const pointerDownOutside = $d715e0554b679f1f$var$usePointerDownOutside(event => {\n    const target = event.target;\n    const isPointerDownOnBranch = [...context.branches].some(branch => branch.contains(target));\n    if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n    onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);\n    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);\n    if (!event.defaultPrevented) onDismiss === null || onDismiss === void 0 || onDismiss();\n  }, ownerDocument);\n  const focusOutside = $d715e0554b679f1f$var$useFocusOutside(event => {\n    const target = event.target;\n    const isFocusInBranch = [...context.branches].some(branch => branch.contains(target));\n    if (isFocusInBranch) return;\n    onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);\n    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);\n    if (!event.defaultPrevented) onDismiss === null || onDismiss === void 0 || onDismiss();\n  }, ownerDocument);\n  $g2vWm$radixuireactuseescapekeydown.useEscapeKeydown(event => {\n    const isHighestLayer = index === context.layers.size - 1;\n    if (!isHighestLayer) return;\n    onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);\n\n    if (!event.defaultPrevented && onDismiss) {\n      event.preventDefault();\n      onDismiss();\n    }\n  }, ownerDocument);\n  $g2vWm$react.useEffect(() => {\n    if (!node1) return;\n\n    if (disableOutsidePointerEvents) {\n      if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n        $d715e0554b679f1f$var$originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n        ownerDocument.body.style.pointerEvents = 'none';\n      }\n\n      context.layersWithOutsidePointerEventsDisabled.add(node1);\n    }\n\n    context.layers.add(node1);\n    $d715e0554b679f1f$var$dispatchUpdate();\n    return () => {\n      if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) ownerDocument.body.style.pointerEvents = $d715e0554b679f1f$var$originalBodyPointerEvents;\n    };\n  }, [node1, ownerDocument, disableOutsidePointerEvents, context]);\n  /**\n  * We purposefully prevent combining this effect with the `disableOutsidePointerEvents` effect\n  * because a change to `disableOutsidePointerEvents` would remove this layer from the stack\n  * and add it to the end again so the layering order wouldn't be _creation order_.\n  * We only want them to be removed from context stacks when unmounted.\n  */\n\n  $g2vWm$react.useEffect(() => {\n    return () => {\n      if (!node1) return;\n      context.layers.delete(node1);\n      context.layersWithOutsidePointerEventsDisabled.delete(node1);\n      $d715e0554b679f1f$var$dispatchUpdate();\n    };\n  }, [node1, context]);\n  $g2vWm$react.useEffect(() => {\n    const handleUpdate = () => force({});\n\n    document.addEventListener($d715e0554b679f1f$var$CONTEXT_UPDATE, handleUpdate);\n    return () => document.removeEventListener($d715e0554b679f1f$var$CONTEXT_UPDATE, handleUpdate);\n  }, []);\n  return /*#__PURE__*/$g2vWm$react.createElement($g2vWm$radixuireactprimitive.Primitive.div, $parcel$interopDefault($g2vWm$babelruntimehelpersextends)({}, layerProps, {\n    ref: composedRefs,\n    style: {\n      pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? 'auto' : 'none' : undefined,\n      ...props.style\n    },\n    onFocusCapture: $g2vWm$radixuiprimitive.composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),\n    onBlurCapture: $g2vWm$radixuiprimitive.composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),\n    onPointerDownCapture: $g2vWm$radixuiprimitive.composeEventHandlers(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)\n  }));\n});\n/*#__PURE__*/\n\nObject.assign($d715e0554b679f1f$export$177fb62ff3ec1f22, {\n  displayName: $d715e0554b679f1f$var$DISMISSABLE_LAYER_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayerBranch\n * -----------------------------------------------------------------------------------------------*/\n\nconst $d715e0554b679f1f$var$BRANCH_NAME = 'DismissableLayerBranch';\nconst $d715e0554b679f1f$export$4d5eb2109db14228 = /*#__PURE__*/$g2vWm$react.forwardRef((props, forwardedRef) => {\n  const context = $g2vWm$react.useContext($d715e0554b679f1f$var$DismissableLayerContext);\n  const ref = $g2vWm$react.useRef(null);\n  const composedRefs = $g2vWm$radixuireactcomposerefs.useComposedRefs(forwardedRef, ref);\n  $g2vWm$react.useEffect(() => {\n    const node = ref.current;\n\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n  return /*#__PURE__*/$g2vWm$react.createElement($g2vWm$radixuireactprimitive.Primitive.div, $parcel$interopDefault($g2vWm$babelruntimehelpersextends)({}, props, {\n    ref: composedRefs\n  }));\n});\n/*#__PURE__*/\n\nObject.assign($d715e0554b679f1f$export$4d5eb2109db14228, {\n  displayName: $d715e0554b679f1f$var$BRANCH_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/\n\n/**\n* Listens for `pointerdown` outside a react subtree. We use `pointerdown` rather than `pointerup`\n* to mimic layer dismissing behaviour present in OS.\n* Returns props to pass to the node we want to check for outside events.\n*/\n\nfunction $d715e0554b679f1f$var$usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {\n  const handlePointerDownOutside = $g2vWm$radixuireactusecallbackref.useCallbackRef(onPointerDownOutside);\n  const isPointerInsideReactTreeRef = $g2vWm$react.useRef(false);\n  const handleClickRef = $g2vWm$react.useRef(() => {});\n  $g2vWm$react.useEffect(() => {\n    const handlePointerDown = event => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        const eventDetail = {\n          originalEvent: event\n        };\n\n        function handleAndDispatchPointerDownOutsideEvent() {\n          $d715e0554b679f1f$var$handleAndDispatchCustomEvent($d715e0554b679f1f$var$POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {\n            discrete: true\n          });\n        }\n        /**\n        * On touch devices, we need to wait for a click event because browsers implement\n        * a ~350ms delay between the time the user stops touching the display and when the\n        * browser executres events. We need to ensure we don't reactivate pointer-events within\n        * this timeframe otherwise the browser may execute events that should have been prevented.\n        *\n        * Additionally, this also lets us deal automatically with cancellations when a click event\n        * isn't raised because the page was considered scrolled/drag-scrolled, long-pressed, etc.\n        *\n        * This is why we also continuously remove the previous listener, because we cannot be\n        * certain that it was raised, and therefore cleaned-up.\n        */\n\n\n        if (event.pointerType === 'touch') {\n          ownerDocument.removeEventListener('click', handleClickRef.current);\n          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;\n          ownerDocument.addEventListener('click', handleClickRef.current, {\n            once: true\n          });\n        } else handleAndDispatchPointerDownOutsideEvent();\n      } else // We need to remove the event listener in case the outside click has been canceled.\n        // See: https://github.com/radix-ui/primitives/issues/2171\n        ownerDocument.removeEventListener('click', handleClickRef.current);\n\n      isPointerInsideReactTreeRef.current = false;\n    };\n    /**\n    * if this hook executes in a component that mounts via a `pointerdown` event, the event\n    * would bubble up to the document and trigger a `pointerDownOutside` event. We avoid\n    * this by delaying the event listener registration on the document.\n    * This is not React specific, but rather how the DOM works, ie:\n    * ```\n    * button.addEventListener('pointerdown', () => {\n    *   console.log('I will log');\n    *   document.addEventListener('pointerdown', () => {\n    *     console.log('I will also log');\n    *   })\n    * });\n    */\n\n\n    const timerId = window.setTimeout(() => {\n      ownerDocument.addEventListener('pointerdown', handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      ownerDocument.removeEventListener('pointerdown', handlePointerDown);\n      ownerDocument.removeEventListener('click', handleClickRef.current);\n    };\n  }, [ownerDocument, handlePointerDownOutside]);\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true\n  };\n}\n/**\n * Listens for when focus happens outside a react subtree.\n * Returns props to pass to the root (node) of the subtree we want to check.\n */\n\n\nfunction $d715e0554b679f1f$var$useFocusOutside(onFocusOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {\n  const handleFocusOutside = $g2vWm$radixuireactusecallbackref.useCallbackRef(onFocusOutside);\n  const isFocusInsideReactTreeRef = $g2vWm$react.useRef(false);\n  $g2vWm$react.useEffect(() => {\n    const handleFocus = event => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = {\n          originalEvent: event\n        };\n        $d715e0554b679f1f$var$handleAndDispatchCustomEvent($d715e0554b679f1f$var$FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n          discrete: false\n        });\n      }\n    };\n\n    ownerDocument.addEventListener('focusin', handleFocus);\n    return () => ownerDocument.removeEventListener('focusin', handleFocus);\n  }, [ownerDocument, handleFocusOutside]);\n  return {\n    onFocusCapture: () => isFocusInsideReactTreeRef.current = true,\n    onBlurCapture: () => isFocusInsideReactTreeRef.current = false\n  };\n}\n\nfunction $d715e0554b679f1f$var$dispatchUpdate() {\n  const event = new CustomEvent($d715e0554b679f1f$var$CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\n\nfunction $d715e0554b679f1f$var$handleAndDispatchCustomEvent(name, handler, detail, {\n  discrete: discrete\n}) {\n  const target = detail.originalEvent.target;\n  const event = new CustomEvent(name, {\n    bubbles: false,\n    cancelable: true,\n    detail: detail\n  });\n  if (handler) target.addEventListener(name, handler, {\n    once: true\n  });\n  if (discrete) $g2vWm$radixuireactprimitive.dispatchDiscreteCustomEvent(target, event);else target.dispatchEvent(event);\n}\n\nconst $d715e0554b679f1f$export$be92b6f5f03c0fe9 = $d715e0554b679f1f$export$177fb62ff3ec1f22;\nconst $d715e0554b679f1f$export$aecb2ddcb55c95be = $d715e0554b679f1f$export$4d5eb2109db14228;","map":{"version":3,"sources":["packages/react/dismissable-layer/src/DismissableLayer.tsx"],"names":["DISMISSABLE_LAYER_NAME","CONTEXT_UPDATE","POINTER_DOWN_OUTSIDE","FOCUS_OUTSIDE","DismissableLayerContext","layers","layersWithOutsidePointerEventsDisabled","branches","DismissableLayer","disableOutsidePointerEvents","context","React","ownerDocument","node","globalThis","composedRefs","useComposedRefs","setNode","Array","highestLayerWithOutsidePointerEventsDisabledIndex","index","isBodyPointerEventsDisabled","isPointerEventsEnabled","pointerDownOutside","usePointerDownOutside","event","target","isPointerDownOnBranch","branch","onPointerDownOutside","onInteractOutside","onDismiss","focusOutside","useFocusOutside","isFocusInBranch","onFocusOutside","useEscapeKeydown","isHighestLayer","onEscapeKeyDown","originalBodyPointerEvents","dispatchUpdate","handleUpdate","force","document","pointerEvents","props","composeEventHandlers","BRANCH_NAME","DismissableLayerBranch","ref","handlePointerDownOutside","useCallbackRef","isPointerInsideReactTreeRef","handleClickRef","handlePointerDown","eventDetail","originalEvent","handleAndDispatchCustomEvent","discrete","once","handleAndDispatchPointerDownOutsideEvent","timerId","window","onPointerDownCapture","handleFocusOutside","isFocusInsideReactTreeRef","handleFocus","onFocusCapture","onBlurCapture","detail","bubbles","cancelable","dispatchDiscreteCustomEvent","Root","Branch"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayer\n * -----------------------------------------------------------------------------------------------*/\n\nconst DISMISSABLE_LAYER_NAME = 'DismissableLayer';\nconst CONTEXT_UPDATE = 'dismissableLayer.update';\nconst POINTER_DOWN_OUTSIDE = 'dismissableLayer.pointerDownOutside';\nconst FOCUS_OUTSIDE = 'dismissableLayer.focusOutside';\n\nlet originalBodyPointerEvents: string;\n\nconst DismissableLayerContext = React.createContext({\n  layers: new Set<DismissableLayerElement>(),\n  layersWithOutsidePointerEventsDisabled: new Set<DismissableLayerElement>(),\n  branches: new Set<DismissableLayerBranchElement>(),\n});\n\ntype DismissableLayerElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DismissableLayerProps extends PrimitiveDivProps {\n  /**\n   * When `true`, hover/focus/click interactions will be disabled on elements outside\n   * the `DismissableLayer`. Users will need to click twice on outside elements to\n   * interact with them: once to close the `DismissableLayer`, and again to trigger the element.\n   */\n  disableOutsidePointerEvents?: boolean;\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void;\n  /**\n   * Event handler called when the focus moves outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onFocusOutside?: (event: FocusOutsideEvent) => void;\n  /**\n   * Event handler called when an interaction happens outside the `DismissableLayer`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: (event: PointerDownOutsideEvent | FocusOutsideEvent) => void;\n  /**\n   * Handler called when the `DismissableLayer` should be dismissed\n   */\n  onDismiss?: () => void;\n}\n\nconst DismissableLayer = React.forwardRef<DismissableLayerElement, DismissableLayerProps>(\n  (props, forwardedRef) => {\n    const {\n      disableOutsidePointerEvents = false,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      onDismiss,\n      ...layerProps\n    } = props;\n    const context = React.useContext(DismissableLayerContext);\n    const [node, setNode] = React.useState<DismissableLayerElement | null>(null);\n    const ownerDocument = node?.ownerDocument ?? globalThis?.document;\n    const [, force] = React.useState({});\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setNode(node));\n    const layers = Array.from(context.layers);\n    const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1); // prettier-ignore\n    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled); // prettier-ignore\n    const index = node ? layers.indexOf(node) : -1;\n    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n\n    const pointerDownOutside = usePointerDownOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n      onPointerDownOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    const focusOutside = useFocusOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (isFocusInBranch) return;\n      onFocusOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    useEscapeKeydown((event) => {\n      const isHighestLayer = index === context.layers.size - 1;\n      if (!isHighestLayer) return;\n      onEscapeKeyDown?.(event);\n      if (!event.defaultPrevented && onDismiss) {\n        event.preventDefault();\n        onDismiss();\n      }\n    }, ownerDocument);\n\n    React.useEffect(() => {\n      if (!node) return;\n      if (disableOutsidePointerEvents) {\n        if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n          originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n          ownerDocument.body.style.pointerEvents = 'none';\n        }\n        context.layersWithOutsidePointerEventsDisabled.add(node);\n      }\n      context.layers.add(node);\n      dispatchUpdate();\n      return () => {\n        if (\n          disableOutsidePointerEvents &&\n          context.layersWithOutsidePointerEventsDisabled.size === 1\n        ) {\n          ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n        }\n      };\n    }, [node, ownerDocument, disableOutsidePointerEvents, context]);\n\n    /**\n     * We purposefully prevent combining this effect with the `disableOutsidePointerEvents` effect\n     * because a change to `disableOutsidePointerEvents` would remove this layer from the stack\n     * and add it to the end again so the layering order wouldn't be _creation order_.\n     * We only want them to be removed from context stacks when unmounted.\n     */\n    React.useEffect(() => {\n      return () => {\n        if (!node) return;\n        context.layers.delete(node);\n        context.layersWithOutsidePointerEventsDisabled.delete(node);\n        dispatchUpdate();\n      };\n    }, [node, context]);\n\n    React.useEffect(() => {\n      const handleUpdate = () => force({});\n      document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n      return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);\n    }, []);\n\n    return (\n      <Primitive.div\n        {...layerProps}\n        ref={composedRefs}\n        style={{\n          pointerEvents: isBodyPointerEventsDisabled\n            ? isPointerEventsEnabled\n              ? 'auto'\n              : 'none'\n            : undefined,\n          ...props.style,\n        }}\n        onFocusCapture={composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture)}\n        onBlurCapture={composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture)}\n        onPointerDownCapture={composeEventHandlers(\n          props.onPointerDownCapture,\n          pointerDownOutside.onPointerDownCapture\n        )}\n      />\n    );\n  }\n);\n\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayerBranch\n * -----------------------------------------------------------------------------------------------*/\n\nconst BRANCH_NAME = 'DismissableLayerBranch';\n\ntype DismissableLayerBranchElement = React.ElementRef<typeof Primitive.div>;\ninterface DismissableLayerBranchProps extends PrimitiveDivProps {}\n\nconst DismissableLayerBranch = React.forwardRef<\n  DismissableLayerBranchElement,\n  DismissableLayerBranchProps\n>((props, forwardedRef) => {\n  const context = React.useContext(DismissableLayerContext);\n  const ref = React.useRef<DismissableLayerBranchElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n\n  return <Primitive.div {...props} ref={composedRefs} />;\n});\n\nDismissableLayerBranch.displayName = BRANCH_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PointerDownOutsideEvent = CustomEvent<{ originalEvent: PointerEvent }>;\ntype FocusOutsideEvent = CustomEvent<{ originalEvent: FocusEvent }>;\n\n/**\n * Listens for `pointerdown` outside a react subtree. We use `pointerdown` rather than `pointerup`\n * to mimic layer dismissing behaviour present in OS.\n * Returns props to pass to the node we want to check for outside events.\n */\nfunction usePointerDownOutside(\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handlePointerDownOutside = useCallbackRef(onPointerDownOutside) as EventListener;\n  const isPointerInsideReactTreeRef = React.useRef(false);\n  const handleClickRef = React.useRef(() => {});\n\n  React.useEffect(() => {\n    const handlePointerDown = (event: PointerEvent) => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n\n        function handleAndDispatchPointerDownOutsideEvent() {\n          handleAndDispatchCustomEvent(\n            POINTER_DOWN_OUTSIDE,\n            handlePointerDownOutside,\n            eventDetail,\n            { discrete: true }\n          );\n        }\n\n        /**\n         * On touch devices, we need to wait for a click event because browsers implement\n         * a ~350ms delay between the time the user stops touching the display and when the\n         * browser executres events. We need to ensure we don't reactivate pointer-events within\n         * this timeframe otherwise the browser may execute events that should have been prevented.\n         *\n         * Additionally, this also lets us deal automatically with cancellations when a click event\n         * isn't raised because the page was considered scrolled/drag-scrolled, long-pressed, etc.\n         *\n         * This is why we also continuously remove the previous listener, because we cannot be\n         * certain that it was raised, and therefore cleaned-up.\n         */\n        if (event.pointerType === 'touch') {\n          ownerDocument.removeEventListener('click', handleClickRef.current);\n          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;\n          ownerDocument.addEventListener('click', handleClickRef.current, { once: true });\n        } else {\n          handleAndDispatchPointerDownOutsideEvent();\n        }\n      } else {\n        // We need to remove the event listener in case the outside click has been canceled.\n        // See: https://github.com/radix-ui/primitives/issues/2171\n        ownerDocument.removeEventListener('click', handleClickRef.current);\n      }\n      isPointerInsideReactTreeRef.current = false;\n    };\n    /**\n     * if this hook executes in a component that mounts via a `pointerdown` event, the event\n     * would bubble up to the document and trigger a `pointerDownOutside` event. We avoid\n     * this by delaying the event listener registration on the document.\n     * This is not React specific, but rather how the DOM works, ie:\n     * ```\n     * button.addEventListener('pointerdown', () => {\n     *   console.log('I will log');\n     *   document.addEventListener('pointerdown', () => {\n     *     console.log('I will also log');\n     *   })\n     * });\n     */\n    const timerId = window.setTimeout(() => {\n      ownerDocument.addEventListener('pointerdown', handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      ownerDocument.removeEventListener('pointerdown', handlePointerDown);\n      ownerDocument.removeEventListener('click', handleClickRef.current);\n    };\n  }, [ownerDocument, handlePointerDownOutside]);\n\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => (isPointerInsideReactTreeRef.current = true),\n  };\n}\n\n/**\n * Listens for when focus happens outside a react subtree.\n * Returns props to pass to the root (node) of the subtree we want to check.\n */\nfunction useFocusOutside(\n  onFocusOutside?: (event: FocusOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handleFocusOutside = useCallbackRef(onFocusOutside) as EventListener;\n  const isFocusInsideReactTreeRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const handleFocus = (event: FocusEvent) => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n          discrete: false,\n        });\n      }\n    };\n    ownerDocument.addEventListener('focusin', handleFocus);\n    return () => ownerDocument.removeEventListener('focusin', handleFocus);\n  }, [ownerDocument, handleFocusOutside]);\n\n  return {\n    onFocusCapture: () => (isFocusInsideReactTreeRef.current = true),\n    onBlurCapture: () => (isFocusInsideReactTreeRef.current = false),\n  };\n}\n\nfunction dispatchUpdate() {\n  const event = new CustomEvent(CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\n\nfunction handleAndDispatchCustomEvent<E extends CustomEvent, OriginalEvent extends Event>(\n  name: string,\n  handler: ((event: E) => void) | undefined,\n  detail: { originalEvent: OriginalEvent } & (E extends CustomEvent<infer D> ? D : never),\n  { discrete }: { discrete: boolean }\n) {\n  const target = detail.originalEvent.target;\n  const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });\n  if (handler) target.addEventListener(name, handler as EventListener, { once: true });\n\n  if (discrete) {\n    dispatchDiscreteCustomEvent(target, event);\n  } else {\n    target.dispatchEvent(event);\n  }\n}\n\nconst Root = DismissableLayer;\nconst Branch = DismissableLayerBranch;\n\nexport {\n  DismissableLayer,\n  DismissableLayerBranch,\n  //\n  Root,\n  Branch,\n};\nexport type { DismissableLayerProps };\n"]},"metadata":{},"sourceType":"script"}