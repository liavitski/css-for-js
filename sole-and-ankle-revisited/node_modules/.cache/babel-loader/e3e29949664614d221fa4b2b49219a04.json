{"ast":null,"code":"import { useEffect as $hPSQ5$useEffect } from \"react\";\nimport { useCallbackRef as $hPSQ5$useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\n/**\n * Listens for when the escape key is down\n */\n\nfunction $addc16e1bbe58fd0$export$3a72a57244d6e765(onEscapeKeyDownProp, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {\n  const onEscapeKeyDown = $hPSQ5$useCallbackRef(onEscapeKeyDownProp);\n  $hPSQ5$useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.key === 'Escape') onEscapeKeyDown(event);\n    };\n\n    ownerDocument.addEventListener('keydown', handleKeyDown);\n    return () => ownerDocument.removeEventListener('keydown', handleKeyDown);\n  }, [onEscapeKeyDown, ownerDocument]);\n}\n\nexport { $addc16e1bbe58fd0$export$3a72a57244d6e765 as useEscapeKeydown };","map":{"version":3,"sources":["packages/react/use-escape-keydown/src/useEscapeKeydown.tsx"],"names":["ownerDocument","globalThis","onEscapeKeyDown","useCallbackRef","React","handleKeyDown","event"],"mappings":";;AAGA;;AAEA;;AACA,SAAA,yCAAA,CAAA,mBAAA,EAEEA,aAAuB,GAAGC,UAAH,KAAA,IAAGA,IAAAA,UAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,UAAU,CAFtC,QAAA,EAGE;AACA,QAAMC,eAAe,GAAGC,qBAAc,CAAtC,mBAAsC,CAAtC;AAEAC,EAAAA,gBAAAA,CAAgB,MAAM;AACpB,UAAMC,aAAa,GAAG,KAACC,IAAyB;AAC9C,UAAIA,KAAK,CAALA,GAAAA,KAAJ,QAAA,EACEJ,eAAe,CAAfA,KAAe,CAAfA;AAEH,KAJD;;AAKAF,IAAAA,aAAa,CAAbA,gBAAAA,CAAAA,SAAAA,EAAAA,aAAAA;AACA,WAAO,MAAMA,aAAa,CAAbA,mBAAAA,CAAAA,SAAAA,EAAb,aAAaA,CAAb;AAPFI,GAAAA,EAQG,CAAA,eAAA,EAAA,aAAA,CARHA,CAAAA;AASD","sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\n/**\n * Listens for when the escape key is down\n */\nfunction useEscapeKeydown(\n  onEscapeKeyDownProp?: (event: KeyboardEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const onEscapeKeyDown = useCallbackRef(onEscapeKeyDownProp);\n\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        onEscapeKeyDown(event);\n      }\n    };\n    ownerDocument.addEventListener('keydown', handleKeyDown);\n    return () => ownerDocument.removeEventListener('keydown', handleKeyDown);\n  }, [onEscapeKeyDown, ownerDocument]);\n}\n\nexport { useEscapeKeydown };\n"]},"metadata":{},"sourceType":"module"}